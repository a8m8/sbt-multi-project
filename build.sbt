//I've found one problem with sbt 0.13.8 => it doesn't override the jars in maven repository
//It was the bug, that was fixed in the next version, so I switched to 0.13.11 sbt version
//in project/build.properties

//This setting will be used for all builds
lazy val commonSettings = Seq(
  organization := "com.a8m8",

  version := "0.1.0-SNAPSHOT",

  scalaVersion := "2.11.8",

  resolvers ++= Seq(
    "Local Maven Repository" at "file://" + Path.userHome.absolutePath + "/.m2/repository"
  )
)

//Settings for scala projects
lazy val scalaProjectSettings = Seq(
  //Override the publishM2 to prevent adding to maven repository
  publishM2 := { }
)

//Settings for java projects
lazy val javaProjectSettings = Seq(
  //Override the publishLocal to prevent adding to ivy repository
  publishLocal := { },
  //When publishMavenStyle is true, a POM is generated by the makePom action and published to the repository instead of an Ivy file.
  publishMavenStyle:=true,
  //to remove the postfix scala version from maven builds
  crossPaths := false
)

lazy val `java-module-a` = (project in file("java-module-a"))
  .settings(commonSettings: _*)
  .settings(javaProjectSettings: _*)

lazy val `java-module-b` = (project in file("java-module-b"))
  .settings(commonSettings: _*)
  .settings(javaProjectSettings: _*)
  //We could define the additional settings here or in the module/build.sbt file, as I've done this for "java-module-a" and "scala-module-a"
  .settings(name := "java-module-b")
  //Depend on provides us the order of builds and automatically injects the dependency ("java-module-a") into "java-module-b"
  .dependsOn(`java-module-a`)

lazy val `scala-module-a` = (project in file("scala-module-a"))
  .settings(commonSettings: _*)
  .settings(scalaProjectSettings: _*)
  //This settings will run the tests before publishLocal command
  .settings(publishLocal <<= publishLocal dependsOn (test in Test))

lazy val `sbt-multi-project` = (project in file("."))
  //Override all builds command to exclude the "sbt-multi-project" from build plan
  .settings(publish := { },
            publishLocal:= { },
            publishM2 := { })

  .aggregate(`java-module-a`,
             `java-module-b`,
             `scala-module-a`)